name: PyTaiko
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
permissions:
  contents: write
  pull-requests: write
  issues: write
  repository-projects: write
jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Install Audio Dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install portaudio libsndfile libsamplerate pkg-config

      # Use MSYS2 for Windows audio library build with ASIO support
      - name: Set up MSYS2 (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            base-devel
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-portaudio
            mingw-w64-x86_64-libsndfile
            mingw-w64-x86_64-libsamplerate
            mingw-w64-x86_64-flac
            mingw-w64-x86_64-libvorbis
            mingw-w64-x86_64-libogg
            mingw-w64-x86_64-opus
            mingw-w64-x86_64-mpg123
            mingw-w64-x86_64-lame
            mingw-w64-x86_64-speex
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-pkg-config

      # Download individual PortAudio files (Windows only)
      - name: Download PortAudio individual files (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          # Create directory structure for PortAudio
          mkdir -p /mingw64/portaudio-custom/{include,lib,bin}
          cd /mingw64/portaudio-custom

          # Download header files
          echo "Downloading PortAudio headers..."
          curl -L -o include/portaudio.h https://raw.githubusercontent.com/PortAudio/portaudio/master/include/portaudio.h

          # Download Windows-specific DLL and import library
          # Note: You'll need to find actual URLs for these files
          echo "Downloading PortAudio binaries..."

          # Option 1: From a release that provides individual files
          curl -L -o lib/libportaudio.dll.a https://example.com/path/to/libportaudio.dll.a
          curl -L -o lib/portaudio.lib https://example.com/path/to/portaudio.lib  # MSVC-style
          curl -L -o bin/portaudio_x64.dll https://example.com/path/to/portaudio_x64.dll

          # Option 2: Alternative sources (adjust URLs as needed)
          # curl -L -o lib/libportaudio.a https://github.com/some-repo/portaudio-static/releases/download/v19.7.0/libportaudio.a
          # curl -L -o bin/portaudio.dll https://github.com/some-repo/portaudio-binaries/releases/download/v19.7.0/portaudio.dll

          # Verify downloads
          echo "=== Downloaded files ==="
          find . -type f -ls

      - name: Set up PortAudio build environment (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          # Create pkg-config file for custom PortAudio
          mkdir -p /mingw64/lib/pkgconfig
          cat > /mingw64/lib/pkgconfig/portaudio-custom.pc << EOF
          prefix=/mingw64/portaudio-custom
          exec_prefix=\${prefix}
          libdir=\${prefix}/lib
          includedir=\${prefix}/include

          Name: PortAudio
          Description: Portable cross-platform Audio API
          Version: 19.7.0
          Libs: -L\${libdir} -lportaudio -lole32 -luuid -lwinmm -ldsound -lwsock32 -lsetupapi
          Cflags: -I\${includedir}
          EOF

          # Or set environment variables directly
          export PORTAUDIO_INCLUDE_DIR="/mingw64/portaudio-custom/include"
          export PORTAUDIO_LIB_DIR="/mingw64/portaudio-custom/lib"
          export PORTAUDIO_BIN_DIR="/mingw64/portaudio-custom/bin"

      - name: Verify PortAudio setup (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          echo "=== Verifying PortAudio setup ==="

          # Check header file
          if [ -f "/mingw64/portaudio-custom/include/portaudio.h" ]; then
            echo "✓ Header file found"
            grep -i "asio\|version" /mingw64/portaudio-custom/include/portaudio.h | head -5
          else
            echo "✗ Header file missing"
          fi

          # Check library files
          ls -la /mingw64/portaudio-custom/lib/ || echo "Library directory not found"

          # Check DLL
          ls -la /mingw64/portaudio-custom/bin/ || echo "Binary directory not found"

          # Test if we can find ASIO symbols (if available)
          find /mingw64/portaudio-custom -name "*.dll" -o -name "*.a" -exec nm {} \; 2>/dev/null | grep -i asio && echo "ASIO symbols found!" || echo "No ASIO symbols found"

      - name: Build static audio library (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        working-directory: libs/audio
        run: |
          # Clean previous builds
          make clean 2>/dev/null || echo "No previous build to clean"

          # Build with custom PortAudio
          export CFLAGS="$CFLAGS -DPA_USE_ASIO=1"

          # Method 1: Use pkg-config with custom .pc file
          if pkg-config --exists portaudio-custom; then
            echo "Building with custom pkg-config PortAudio"
            make all PORTAUDIO_CFLAGS="$(pkg-config --cflags portaudio-custom)" PORTAUDIO_LIBS="$(pkg-config --libs portaudio-custom)"

          # Method 2: Use environment variables
          elif [ -d "/mingw64/portaudio-custom" ]; then
            echo "Building with custom PortAudio paths"
            make all \
              PORTAUDIO_CFLAGS="-I/mingw64/portaudio-custom/include" \
              PORTAUDIO_LIBS="-L/mingw64/portaudio-custom/lib -lportaudio -lole32 -luuid -lwinmm -ldsound -lwsock32 -lsetupapi"

          # Method 3: Fallback to system PortAudio
          else
            echo "Falling back to system PortAudio"
            if pkg-config --exists portaudio; then
              make all PORTAUDIO_CFLAGS="$(pkg-config --cflags portaudio)" PORTAUDIO_LIBS="$(pkg-config --libs portaudio)"
            else
              make all PORTAUDIO_LIBS="-lportaudio -lole32 -luuid -lwinmm -ldsound -lwsock32 -lsetupapi"
            fi
          fi

          # Verify the build
          make verify 2>/dev/null || echo "Verification step not available"

      - name: Copy libraries and DLLs (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir -p build/lib

          # Copy your built library
          cp libs/audio/libaudio.dll build/lib/

          # Copy the custom PortAudio DLL if it exists
          if [ -f "/mingw64/portaudio-custom/bin/portaudio.dll" ]; then
            cp /mingw64/portaudio-custom/bin/portaudio.dll build/lib/
            echo "✓ Custom PortAudio DLL copied"
          elif [ -f "/mingw64/portaudio-custom/bin/portaudio_x64.dll" ]; then
            cp /mingw64/portaudio-custom/bin/portaudio_x64.dll build/lib/
            echo "✓ Custom PortAudio x64 DLL copied"
          else
            echo "⚠ No custom PortAudio DLL found - runtime may need system PortAudio"
          fi

          echo "Build output:"
          ls -la build/lib/
        shell: bash

      # For Unix systems, also try static builds
      - name: Install static development libraries (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
              build-essential \
              pkg-config \
              libportaudio2 \
              portaudio19-dev \
              libsndfile1-dev \
              libsamplerate0-dev \
              libflac-dev \
              libvorbis-dev \
              libogg-dev \
              ccache

      - name: Build static audio library (Unix)
        if: runner.os != 'Windows'
        run: |
          cd libs/audio
          make clean
          make static || make all  # Fallback to regular build if static fails
          make verify
        shell: bash

      - name: Install static audio library (Unix)
        if: runner.os != 'Windows'
        run: |
          cd libs/audio
          sudo make install
        shell: bash

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Setup Python
        run: uv python install

      - name: Install Dependencies
        run: |
          uv sync

      - name: Install Nuitka
        run: |
          uv add nuitka

      - name: Build Executable
        run: |
          uv run nuitka --lto=yes --mode=app --noinclude-setuptools-mode=nofollow --noinclude-IPython-mode=nofollow --assume-yes-for-downloads PyTaiko.py

      - name: Create Release Directory
        run: |
          mkdir -p release
          cp -r Graphics Sounds Videos Songs config.toml shader model release/

          # Copy the compiled audio library and dependencies to release
          if [ "${{ runner.os }}" == "Windows" ]; then
            # Copy all DLLs from libs/audio (includes our library and dependencies)
            cp libs/audio/*.dll release/ 2>/dev/null || echo "No DLLs found in libs/audio/"
            # Also try from build/lib as backup
            cp build/lib/*.dll release/ 2>/dev/null || echo "No DLLs found in build/lib/"
            # List what we copied
            echo "DLLs in release directory:"
            ls -la release/*.dll 2>/dev/null || echo "No DLLs found in release/"
          elif [ "${{ runner.os }}" == "macOS" ]; then
            cp libs/audio/libaudio.dylib release/ 2>/dev/null || true
          else
            cp libs/audio/libaudio.so release/ 2>/dev/null || true
          fi

          # Copy executable based on OS
          if [ "${{ runner.os }}" == "Windows" ]; then
            cp *.exe release/ 2>/dev/null || echo "No .exe files found"
          elif [ "${{ runner.os }}" == "macOS" ]; then
            cp -r *.app release/ 2>/dev/null || echo "No .app bundles found"
          else
            cp *.bin release/ 2>/dev/null || echo "No .bin files found"
          fi

          echo "Final release directory contents:"
          ls -la release/
        shell: bash

      - name: Create Zip Archive
        run: |
          cd release
          if [ "${{ runner.os }}" == "Windows" ]; then
            7z a ../PyTaiko-${{ runner.os }}-${{ runner.arch }}.zip *
          else
            zip -r ../PyTaiko-${{ runner.os }}-${{ runner.arch }}.zip *
          fi
        shell: bash

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: PyTaiko-${{ runner.os }}-${{ runner.arch }}
          path: release/

      - name: Upload Release
        uses: softprops/action-gh-release@v2
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        with:
          files: PyTaiko-${{ runner.os }}-${{ runner.arch }}.zip
          name: "PyTaiko [Rolling Release]"
          tag_name: "latest"
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
